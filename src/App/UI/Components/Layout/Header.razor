@using System.Globalization
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.WebUtilities
@using Octokit

@inherits Stateful<HeaderState>
@implements IAsyncDisposable

@inject IWadioApi Api
@inject IAsyncCache Cache
@inject DOMInterop Dom
@inject IGitHubClient GitHub
@inject HistoryInterop History
@inject NavigationManager Navigation

<header class="col-span-2 flex flex-row isolate items-center py-2.5 md:py-0 md:pt-2.5 px-2.5 md:px-5.5 row-1 w-full z-10" @onfullscreenchange="@OnFullscreenChange">
    <button class="icon !p-2.5 font-extrabold !hidden md:!flex" type="button" title="Menu" @onclick="@OnMenuToggle">
        <Icon Name="@(IsMenuOpen? IconName.MenuOpen: IconName.Menu)" Size="@TextSize.ExtraLarge2" />
    </button>

    <div class="flex flex-row items-center justify-between md:ml-6.5 w-full">
        <div class="flex flex-row items-center justify-between space-x-2.5 w-fit">
            @if (State.History is not null)
            {
                <button class="icon font-extrabold !p-2.5" type="button" title="Back" @onclick="@OnBackClick" disabled="@(!State.History.IsBackwardSupported)">
                    <Icon Name="@IconName.ArrowBack" Size="@TextSize.ExtraLarge2" />
                </button>

                <button class="icon font-extrabold !p-2.5 !hidden md:!flex" type="button" title="Back" @onclick="@OnForwardClick" disabled="@(!State.History.IsForwardSupported)">
                    <Icon Name="@IconName.ArrowForward" Size="@TextSize.ExtraLarge2" />
                </button>
            }

            <a class="btn icon !p-2.5 font-extrabold !hidden md:!flex" href="/" title="Home">
                <Icon Name="@IconName.Home" Filled="false" Size="@TextSize.ExtraLarge" />
            </a>
        </div>

        <div @ref="@container" class="flex flex-row items-center justify-center mr-2.5 md:mr-6.5 relative w-full md:max-w-1/2 lg:max-w-1/3" @onclickout="@CancelAndReset">
            <form class="flex flex-row items-center relative w-full" rel="search" role="search" @onsubmit="@OnSearchSubmit">
                <input class="backdrop-crust text-xl w-full placeholder:font-semibold" placeholder="Search Stations..." type="text" value="@query" @oninput="@OnSearchInput" />
                <button class="absolute icon end-2" title="Search" type="submit" disabled="@string.IsNullOrWhiteSpace(query)">
                    <Icon Name="@IconName.Search" Size="@TextSize.ExtraLarge2" />
                </button>
            </form>

            @if (State.Stations.HasValue)
            {
                <div class="absolute mt-4 mx-0 px-2.5 md:px-1.5 top-full w-screen z-20 md:w-full">
                    <div class="bg-mantle backdrop-mantle flex flex-col items-center p-2 ring-1 ring-fuchsia-800/20 rounded-sm shadow-sm w-full">
                        @if (!State.IsLoading)
                        {
                            <ul class="space-y-2 w-full">
                                @foreach (var station in State.Stations)
                                {
                                    <li class="p-2.5 ring-0 ring-fuchsia-400/20 rounded-md active:bg-crust active:ring-1 active:shadow-sm hover:bg-crust hover:ring-1 hover:shadow-sm" @key="@station.Id">
                                        <a class="flex flex-row group items-center space-x-4" href="/station/@station.Id" title="@station.Name">
                                            <StationArt class="size-10" IsInteractive="false" IsMetaVisible="false" Station="@station" />
                                            <Marquee class="ease-in font-medium text-gray-400 text-lg transition w-full" Mode="@(MarqueeMode.Active | MarqueeMode.Hover)" Speed="@MarqueeSpeed.Slow" Text="@station.Name" />
                                        </a>
                                    </li>
                                }

                                <li class="p-2.5 ring-0 ring-fuchsia-400/20 rounded-md active:bg-crust active:ring-1 active:shadow-sm hover:bg-crust hover:ring-1 hover:shadow-sm">
                                    <div class="cursor-pointer flex flex-row items-center space-x-4" role="button" @onclick="@OnSearchSubmit">
                                        <div class="flex items-center justify-center w-10">
                                            <Icon Name="@IconName.ArrowForward" Size="@TextSize.ExtraLarge" />
                                        </div>
                                        <span>View More...</span>
                                    </div>
                                </li>
                            </ul>
                        }
                        else
                        {
                            <Loading Size="@TextSize.ExtraLarge" />
                        }
                    </div>
                </div>
            }
        </div>

        <button class="icon !p-2.5 font-extrabold" type="button" title="App Info" @onclick="@OnAboutClick" rel="help">
            <Icon Name="@IconName.Help" Filled="false" Size="@TextSize.ExtraLarge" />
        </button>
    </div>
</header>

<Dialog @ref="@dialog">
    <div class="flex flex-row font-medium items-center justify-between">
        <h1 class="font-logo text-6xl text-fuchsia-300">Wadio</h1>
        <a class="ease-in opacity-90 transition hover:opacity-100" href="https://github.com/ESCd/wadio" target="_blank" title="Wadio on GitHub">
            <img class="h-4" src="/github-logo.svg" alt="GitHub logo" />
        </a>
    </div>

    <Divider class="p-2 px-0.5" />

    <div class="max-w-prose py-2.5 space-y-4">
        <p>A music app, powered by <a href="https://www.radio-browser.info" target="_blank">radio-browser</a>.</p>

        <div class="bg-crust max-h-72 overflow-y-auto px-0.5 rounded-sm snap-y">
            @if (State.Releases.HasValue)
            {
                <Virtualize Context="release" Items="@State.Releases.Value">
                    <div class="flex flex-col snap-start w-full">
                        <code class="font-extrabold p-2 text-gray-100 text-lg">@release.Name</code>
                        <Divider class="px-2.5" />
                        <Markdown class="p-2 prose-sm" Pipeline="@ReleaseNotesDefaults.Pipeline" Value="@release.Body" />
                    </div>
                </Virtualize>
            }
            else
            {
                <p class="flex flex-row h-full items-center justify-center">
                    <Loading Size="@TextSize.ExtraLarge3" />
                </p>
            }
        </div>

        <p class="flex flex-col sm:flex-row items-center justify-around space-y-2.5 md:space-y-0">
            <a class="drop-shadow-sm overflow-hidden rounded-full shadow-sm w-fit" href="https://www.buymeacoffee.com/cryptoc1" target="_blank">
                <img class="h-10.5" src="https://img.buymeacoffee.com/button-api/?text=Buy me a coffee&emoji=â˜•&slug=cryptoc1&button_colour=FFDD00&font_colour=000000&font_family=Cookie&outline_colour=000000&coffee_colour=ffffff" loading="lazy" />
            </a>

            <a class="bg-accent drop-shadow-sm flex flex-row justify-around items-center !no-underline p-2.5 rounded-full shadow-sm space-x-0.5 w-fit" href="https://ko-fi.com/cryptoc1" target="_blank">
                <img class="shrink-0 w-6" src="https://storage.ko-fi.com/cdn/cup-border.png" alt="Ko-fi donations" loading="lazy" />
                <span class="font-bold px-2 text-white">Support on Ko-fi</span>
            </a>
        </p>
    </div>

    <div class="flex flex-row items-center justify-between mt-2">
        <div class="flex flex-col">
            <code class="text-xs">v@(AppVersion.Value)</code>
            <code class="text-xs">&copy;@DateTime.Today.Year Escape Developers</code>
        </div>

        <button type="button" @onclick="@(() => dialog!.Close())">Close</button>
    </div>
</Dialog>

@code {

    private CancellationTokenSource cancellation = new();
    private ElementReference container;
    private Dialog dialog;
    private string? query;
    private List<IAsyncDisposable> listeners = [];

    [EditorRequired]
    [Parameter]
    public bool IsMenuOpen { get; init; }

    [Parameter]
    public EventCallback OnMenuToggle { get; init; }

    [CascadingParameter]
    public SearchContext SearchContext { get; init; }

    private async Task<bool> CancelAndReset()
    {
        await cancellation.CancelAsync();
        if (!cancellation.TryReset())
        {
            cancellation.Dispose();
            cancellation = new();
        }

        return await Mutate(HeaderState.Reset);
    }

    protected override void Dispose(bool disposing)
    {
        base.Dispose(disposing);
        if (disposing)
        {
            cancellation.Dispose();
            Navigation.LocationChanged -= OnLocationChanged;
        }
    }

    public async ValueTask DisposeAsync()
    {
        Dispose(true);
        foreach (var listener in listeners)
        {
            await listener.DisposeAsync();
        }

        listeners.Clear();
    }

    private Task OnAboutClick()
    {
        var opening = dialog!.Open();
        var mutation = Mutate(state => HeaderState.LoadReleases(Cache, GitHub, state));

        return Task.WhenAll(mutation, opening);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Navigation.LocationChanged += OnLocationChanged;

            listeners.Add(await Dom.AddAppInstalledListener(OnAppInstalled));
            listeners.Add(await Dom.AddClickOutListener(container));
            listeners.Add(await Dom.AddFullscreenChangeListener(OnFullscreenChange));

            await Mutate(state => HeaderState.LoadHistorySupport(Dom, History, state));
        }
    }

    private Task OnAppInstalled() => Mutate(state => HeaderState.LoadHistorySupport(Dom, History, state));
    private async Task OnBackClick() => await History.Back();
    private async Task OnForwardClick() => await History.Forward();

    private async void OnLocationChanged(object? _, LocationChangedEventArgs e)
    {
        await CancelAndReset();
        if (Uri.TryCreate(e.Location, UriKind.RelativeOrAbsolute, out var url))
        {
            query = default;
            if (url.AbsolutePath.StartsWith("/search"))
            {
                QueryHelpers.ParseQuery(url.Query).TryGetValue(nameof(Pages.Search.Name), out var name);
                query = name;
            }

            StateHasChanged();
        }

        if (State.History is not null)
        {
            await Mutate(state => HeaderState.RefreshHistorySupport(History, state));
        }
    }

    private Task OnFullscreenChange() => Mutate(state => HeaderState.LoadHistorySupport(Dom, History, state));
    private async Task OnSearchSubmit() => await SearchContext.Search(query);

    private async Task OnSearchInput(ChangeEventArgs e)
    {
        if (BindConverter.TryConvertToString(e.Value, CultureInfo.CurrentCulture, out var value))
        {
            if (string.IsNullOrWhiteSpace(query = value?.Trim()))
            {
                await CancelAndReset();
                return;
            }

            await CancelAndReset();
            try
            {
                await Task.Delay(375, cancellation.Token);
                await Mutate(state => HeaderState.Search(Api.Stations, Cache, query, state, cancellation.Token));
            }
            catch (OperationCanceledException cancelled) when (cancelled.CancellationToken == cancellation.Token)
            {
                await Mutate(HeaderState.Reset);
            }
        }
    }

}