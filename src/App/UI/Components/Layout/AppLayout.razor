@using Wadio.App.UI.Components.Routing
@using Wadio.App.UI.Infrastructure

@inherits Stateful<AppLayoutState>
@implements IAsyncDisposable

@inject IWadioApi Api
@inject DOMInterop Dom
@inject LocalStorageInterop LocalStorage
@inject NavigationManager Navigation

<CascadingValue TValue="PlayerContext" Value="@player">
    <CascadingValue TValue="SearchContext" Value="@search">
        <Header IsMenuOpen="@State.IsMenuOpen" OnMenuToggle="@OnMenuToggle" />

        <div class=@ClassNames.Combine("col-1 h-full isolate pt-0.5 relative row-4 w-full z-10 md:pl-2.5 md:row-2 md:z-auto", !State.IsMenuOpen ? "hidden md:flex" : "")>
            <div class=@ClassNames.Combine("absolute backdrop-blur-[0.8px] bottom-0 left-0 right-0 top-0 w-full -z-1", player.Station is null ? "rounded-t-md md:rounded-none" : "")></div>
            <Navigation IsMenuOpen="@State.IsMenuOpen" OnRandomClick="@OnRandomClick" />
        </div>

        <div class="col-1 md:col-2 h-full overflow-hidden overscroll-contain md:ml-2 rounded-md row-start-2 row-end-5 md:row-end-4">
            @ChildContent
        </div>

        <div class=@ClassNames.Combine("block col-start-1 col-end-2 md:col-end-3 ease-in h-auto isolate p-1.5 pb-2 !pt-0.5 md:p-2.5 md:mt-2.5 relative row-3 transition-opacity w-full z-8", player.Station is null ? "hidden opacity-0 md:block md:opacity-100" : "opacity-100")>
            <div class="absolute backdrop-blur-[0.8px] bottom-0 left-0 right-0 rounded-t-md top-0 -z-1"></div>
            <Player />
        </div>
    </CascadingValue>
</CascadingValue>

@code {

    private readonly List<IAsyncDisposable> listeners = [];
    private readonly List<IDisposable> subscriptions = [];

    private readonly PlayerContext player = new();
    private readonly SearchContext search = new();

    [EditorRequired]
    [Parameter]
    public RenderFragment ChildContent { get; init; }

    public async ValueTask DisposeAsync()
    {
        Dispose(true);

        await Disposer.DisposeAsync(listeners);
        listeners.Clear();

        await player.DisposeAsync();
    }

    protected override void Dispose(bool disposing)
    {
        if (disposing)
        {
            subscriptions.ForEach(subscription => subscription.Dispose());
            subscriptions.Clear();
        }

        base.Dispose(disposing);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Mutate(state => AppLayoutState.Load(Dom, LocalStorage, state));

            listeners.Add(await Dom.AddBreakpointListener(OnBreakpointChange));
            subscriptions.Add(player.OnChanged((_, _) =>
            {
                StateHasChanged();
                return default;
            }));

            subscriptions.Add(search.OnSearchRequested((e, _) =>
            {
                Navigation.NavigateToSearch(new() { Name = e.Query });
                return default;
            }));
        }
    }

    private Task OnBreakpointChange(BreakpointChangeEventArgs e) => Mutate(state => AppLayoutState.OnBreakpointChange(e, state));
    private Task OnMenuToggle() => Mutate(state => AppLayoutState.ToggleMenu(LocalStorage, state));
    private Task OnRandomClick() => Mutate(state => AppLayoutState.GoToRandom(Api, Navigation, state));

}