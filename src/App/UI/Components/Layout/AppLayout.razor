@using Wadio.App.UI.Components.Routing

@inherits Stateful<AppLayoutState>
@implements IAsyncDisposable

@inject IWadioApi Api
@inject LocalStorageInterop LocalStorage
@inject NavigationManager Navigation

<CascadingValue TValue="PlayerContext" Value="@player">
    <CascadingValue TValue="SearchContext" Value="@search">
        <Header IsMenuOpen="@State.IsMenuOpen" OnMenuToggle="@OnMenuToggle" />

        <div class=@ClassNames.Combine("col-1 flex flex-col pl-2.5 h-full", State.IsMenuOpen ? "pb-2.5 pr-2.5 md:pb-0 md:pr-0" : "hidden md:flex")>
            <Navigation IsMenuOpen="@State.IsMenuOpen" OnRandomClick="@OnRandomClick" />
        </div>

        <div class="col-2 overflow-hidden md:pl-2 rounded-md row-2">
            <main class="h-full overflow-auto w-full">
                @ChildContent
            </main>
        </div>

        <div class=@ClassNames.Combine("block col-span-2 ease-in md:p-2.5 md:pt-0 transition w-full z-10", player.Station is null ? "hidden opacity-0 md:block md:opacity-100" : "opacity-100")>
            <Player class="rounded-t-md md:rounded-md" />
        </div>
    </CascadingValue>
</CascadingValue>

@code {

    private readonly List<IDisposable> subscriptions = [];

    private readonly PlayerContext player = new();
    private readonly SearchContext search = new();

    [EditorRequired]
    [Parameter]
    public RenderFragment ChildContent { get; init; }

    public async ValueTask DisposeAsync()
    {
        Dispose(true);
        await player.DisposeAsync();
    }

    protected override void Dispose(bool disposing)
    {
        if (disposing)
        {
            subscriptions.ForEach(subscription => subscription.Dispose());
            subscriptions.Clear();
        }

        base.Dispose(disposing);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Mutate(state => AppLayoutState.Load(LocalStorage, state));
            subscriptions.Add(player.OnChanged(_ =>
            {
                StateHasChanged();
                return default;
            }));

            subscriptions.Add(search.OnSearchRequested((e, _) =>
            {
                Navigation.NavigateToSearch(new() { Name = e.Query });
                return default;
            }));
        }
    }

    private Task OnMenuToggle() => Mutate(state => AppLayoutState.ToggleMenu(LocalStorage, state));
    private Task OnRandomClick() => Mutate(state => AppLayoutState.GoToRandom(Api, Navigation, state));

}