@using Microsoft.AspNetCore.Components.Routing

<nav @ref="@nav" class=@ClassNames.Combine("backdrop-mantle drop-shadow-sm ease-in flex flex-row md:flex-col h-full isolate items-stretch md:items-center justify-center md:justify-start overflow-y-auto p-1.5 md:p-2.5 ring-accent-dark rounded-t-md md:rounded-md shadow-sm space-x-2 md:space-x-0 md:space-y-2 transition transition-width", IsMenuOpen ? "opacity-100 w-full" : "hidden opacity-0 md:flex md:opacity-100") tabindex="-1">
    <div class="w-full md:hidden">
        @NavLink(NavigationItems.Home)
    </div>

    @foreach (var item in NavigationItems.All)
    {
        <div class="w-full">
            @NavLink(item)
        </div>
    }

    <div class="grow hidden md:block"></div>

    <div class="w-full">
        <span class=@ClassNames.Combine([.. DetermineClassNames(IsMenuOpen), "cursor-pointer", random ? "active" : ""]) @onclick="@OnRandomCore" @onkeydown="@ButtonCompat.OnKeyDown(OnRandomCore)" role="button" tabindex="0">
            @NavLinkBody(NavigationItems.Random, random)
        </span>
    </div>
</nav>

@code {

    private ElementReference nav;
    private bool random;

    [EditorRequired]
    [Parameter]
    public bool IsMenuOpen { get; init; }

    [Parameter]
    public EventCallback OnRandomClick { get; init; }

    private static IEnumerable<string> DetermineClassNames(bool open)
    {
        yield return "nav-link";

        if (!open)
        {
            yield return "justify-center";
        }
    }

    public ValueTask FocusAsync() => nav.FocusAsync();

    private RenderFragment NavLink(NavigationItem item) => __builder =>
    {
        <NavLink ActiveClass="active" class=@ClassNames.Combine([.. DetermineClassNames(IsMenuOpen)]) href="@item.Path" tabindex="0" title="@item.Label" Match="@item.Match" @key="@item.Path">
            @NavLinkBody(item, false)
        </NavLink>
    };

    private RenderFragment NavLinkBody(NavigationItem item, bool animate = false) => __builder =>
    {
        <div class="flex items-center justify-center p-1.5 md:p-3">
            <Icon class=@ClassNames.Combine("md:text-2xl", animate ? "motion-safe:animate-spin" : "") Name="@item.Icon.Name" Filled="@item.Icon.Filled" Size="@TextSize.ExtraLarge" />
        </div>
        <span class=@ClassNames.Combine("ease-in font-semibold md:ml-0.5 md:mr-2.5 p-0.5 md:p-2 rounded-md text-xs md:text-lg transition", !IsMenuOpen ? "hidden opacity-0" : "opacity-100")>@item.Label</span>
    };

    private async Task OnRandomCore()
    {
        if (!Interlocked.Exchange(ref random, true))
        {
            await OnRandomClick.InvokeAsync();
            random = false;
        }
    }

}