@using Wadio.App.UI.Infrastructure

@page "/"

@inherits Stateful<DiscoverState>

@inject IWadioApi Api

<PageTitle>Wadio: Explore</PageTitle>
<HeadContent>
    @foreach (var station in GetStationsWithIcons(State))
    {
        <link rel="preload" href="@station.IconUrl" as="image" @key="@station.Id" />
    }

    <OpenGraphMeta Title="Wadio: Explore" />
</HeadContent>

<div class="flex flex-col space-y-8">
    @StationsCards("Trending", State.Trending)
    @StationsCards("Popular", State.Popular)
    @StationsCards("Recently Updated", State.RecentlyUpdated)
    @StationsCards("Random", State.Random)
</div>

@code {

    [CascadingParameter]
    public PlayerContext PlayerContext { get; init; } = default!;

    private static IEnumerable<Abstractions.Api.Station> GetStationsWithIcons(DiscoverState state)
    {
        ArgumentNullException.ThrowIfNull(state);

        var keys = new HashSet<Guid>();
        foreach (var station in Enumerate(state.Trending, keys))
        {
            yield return station;
        }

        foreach (var station in Enumerate(state.Popular, keys))
        {
            yield return station;
        }

        foreach (var station in Enumerate(state.RecentlyUpdated, keys))
        {
            yield return station;
        }

        foreach (var station in Enumerate(state.Random, keys))
        {
            yield return station;
        }

        static IEnumerable<Abstractions.Api.Station> Enumerate(StationData data, HashSet<Guid> keys)
        {
            ArgumentNullException.ThrowIfNull(data);
            foreach (var station in data.Value)
            {
                if (station.IconUrl is not null && keys.Add(station.Id))
                {
                    yield return station;
                }
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (!TryRestoreFromPersistence())
        {
            await Mutate(state => DiscoverState.Load(Api.Stations, state));
        }
    }

    private RenderFragment StationsCards(string label, StationData data) => __builder =>
    {
        <div class="flex flex-col space-y-2 w-full">
            <div class="flex flex-row items-center justify-between px-2.5">
                <label class="drop-shadow-sm font-extrabold text-gray-400 !text-3xl text-nowrap">@label</label>
                <a class="btn icon" href="/search?Order=@((byte)data.Order)" role="button" title="View More">
                    <Icon Name="@IconName.ArrowForward" Size="@TextSize.ExtraLarge" />
                </a>
            </div>

            <ul class=@ClassNames.Combine("flex flex-row items-stretch overflow-x-auto pb-2.5 space-x-2.5 w-full", data.IsLoading ? "min-h-50" : "")>
                @if (!data.IsLoading)
                {
                    foreach (var station in data.Value)
                    {
                        <li @key="@station.Id">
                            <StationCard ArtworkLoading="@ImageLoadStrategy.Eager" Station="@station" />
                        </li>
                    }
                }
                else
                {
                    foreach (var key in Enumerable.Range(0, DiscoverState.StationCount))
                    {
                        <li @key="key">
                            <StationCard Station="default" />
                        </li>
                    }
                }
            </ul>
        </div>
    };

}