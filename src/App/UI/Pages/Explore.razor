@page "/explore"

@inherits Stateful<ExploreState>

@inject IWadioApi Api
@inject IAsyncCache Cache
@inject GeolocationInterop Geolocation

<Page Mode="PageMode.Cell" Title="Explore">
    <div class="bg-mantle flex h-full items-center justify-center pb-player md:pb-0 relative w-full">
        @if (!State.IsLoading)
        {
            <Map class="h-full p-px pb-player md:pb-px rounded-t-md md:rounded-md w-full z-0" Center="@State.Center" EnableLocate="true" BufferSize="4" MinZoom="5.75f" OnBoundsChanged="@OnBoundsChanged" OnReady="@OnMapReady" data-player-inactive="@(PlayerContext.Station is null)">
                @foreach (var station in State.Stations.Values)
                {
                    <MapMarker Position="@((station.Latitude!.Value, station.Longitude!.Value))" Style="@MarkerStyle.Custom" Title="@station.Name" @key="station.Id">
                        <StationCard Mode="@StationCardMode.Active" Station="@station" />
                    </MapMarker>
                }
            </Map>
        }

        @if (State.IsLoading || !State.IsReady)
        {
            <div class="absolute backdrop-mantle drop-shadow-sm flex h-full items-center justify-center rounded-t-md md:rounded-md w-full z-10">
                <Loading Size="@TextSize.ExtraLarge4" />
            </div>
        }
        else if (State.IsSearching)
        {
            <div class="is-searching">
                <Loading Size="@TextSize.Large" Pulse="false" />
            </div>
        }
    </div>
</Page>

@code {

    private static readonly TimeSpan DebounceRate = TimeSpan.FromMilliseconds(650);

    private CancellationTokenSource cancellation = new();

    [CascadingParameter]
    [EditorRequired]
    public PlayerContext PlayerContext { get; init; } = default!;

    private async Task<bool> CancelAndReset()
    {
        await cancellation.CancelAsync();
        if (!cancellation.TryReset())
        {
            cancellation.Dispose();
            cancellation = new();

            return true;
        }

        return false;
    }

    private async ValueTask ExecuteSearch(ProximitySearchParameter proximity)
    {
        ArgumentNullException.ThrowIfNull(proximity);

        if (State.Proximity == proximity)
        {
            return;
        }

        await CancelAndReset();
        try
        {
            await Mutate(state => state with
            {
                IsSearching = true,
            });

            await Task.Delay(DebounceRate, cancellation.Token);
            await Mutate(state => ExploreState.Search(Api.Stations, Cache, proximity, state, cancellation.Token));
        }
        catch (TaskCanceledException e) when (e.CancellationToken == cancellation.Token)
        {
            await Mutate(state => state with
            {
                IsSearching = false
            });
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Mutate(state => ExploreState.Load(Api.Stations, Geolocation, state));
        }
    }

    private async Task OnBoundsChanged(OnBoundsChangedEvent e)
    {
        ArgumentNullException.ThrowIfNull(e);

        if (!State.IsReady)
        {
            await Mutate(state => state with
            {
                IsReady = true
            });
        }

        await ExecuteSearch((e.Center.Latitude, e.Center.Longitude, e.Radius));
    }


    private Task OnMapReady(OnReadyEvent e) => OnBoundsChanged(new(e.Center, e.Radius));

}