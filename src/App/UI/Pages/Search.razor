@using System.Runtime.CompilerServices
@using Wadio.App.UI.Components.Routing

@page "/search"

@inherits Stateful<SearchState>

@inject IWadioApi Api
@inject NavigationManager Navigation

<PageTitle>@(string.IsNullOrWhiteSpace(parameters.Name) ? "Wadio: Search" : $"Wadio: Search for '{parameters.Name}'")</PageTitle>
<HeadContent>
    @foreach (var station in GetStationsWithIcons(State))
    {
        <link rel="preload" href="@station.IconUrl" as="image" @key="@station.Id" />
    }

    <OpenGraphMeta Title="@(string.IsNullOrWhiteSpace(parameters.Name) ? "Wadio: Search" : $"Wadio: Search for '{parameters.Name}'")" />
</HeadContent>

<div class="gap-2.5 grid grid-cols-1 grid-rows-(--grid-rows-search) h-full w-full">
    <EditForm @ref="@form" class="flex justify-center gap-2.5 p-2.5 pb-0 space-y-2.5" Model="@parameters" OnSubmit="@OnSearchSubmit">
        <FormValidator @ref="@validator" />

        <div class="flex flex-row gap-5 items-stretch max-h-64 overflow-x-auto pb-2.5 snap-x">
            <div class="flex flex-col max-w-72 min-w-44 shrink-0 snap-start space-y-1">
                <label class="font-bold !text-gray-400 text-sm uppercase">order</label>
                <InputFilterEnum class="h-full" TValue="StationOrderBy" @bind-Value="@parameters.Order" Disabled="@(!State.IsLoaded)" />
                <ValidationMessage For="@(() => parameters.Order)" />
            </div>

            <div class="flex flex-col max-w-72 min-w-44 shrink-0 snap-start space-y-1">
                <label class="font-bold !text-gray-400 text-sm uppercase">country</label>
                <InputFilter class="h-full" TValue="string" @bind-Value="@parameters.CountryCode" Disabled="@(!State.IsLoaded)" Filter="@StringFilterProvider.OrdinalIgnoreCase" Options="@State.Countries" />
                <ValidationMessage For="@(() => parameters.CountryCode)" />
            </div>

            <div class="flex flex-col max-w-72 min-w-44 shrink-0 snap-start space-y-1">
                <label class="font-bold !text-gray-400 text-sm uppercase">language</label>
                <InputFilter class="h-full" TValue="string" @bind-Value="@parameters.LanguageCode" Disabled="@(!State.IsLoaded)" Filter="@StringFilterProvider.OrdinalIgnoreCase" Options="@State.Languages" />
                <ValidationMessage For="@(() => parameters.LanguageCode)" />
            </div>

            <div class="flex flex-col max-w-72 min-w-44 shrink-0 snap-start space-y-1">
                <label class="font-bold !text-gray-400 text-sm uppercase">tag</label>
                <InputFilter class="h-full" TValue="string" @bind-Value="@parameters.Tag" Disabled="@(!State.IsLoaded)" Filter="@StringFilterProvider.OrdinalIgnoreCase" Options="@State.Tags" />
                <ValidationMessage For="@(() => parameters.Tag)" />
            </div>

            <div class="flex flex-col max-w-72 min-w-44 shrink-0 snap-start space-y-1">
                <label class="font-bold !text-gray-400 text-sm uppercase">codec</label>
                <InputFilterEnum class="h-full" TValue="Codec" @bind-Value="@parameters.Codec" Disabled="@(!State.IsLoaded)" />
                <ValidationMessage For="@(() => parameters.Codec)" />
            </div>
        </div>
    </EditForm>

    <div class="flex flex-col gap-5 p-2.5 w-full">
        @if (!State.IsSearching)
        {
            @if (State.Stations.Length is not 0)
            {
                <div class="flex flex-wrap gap-2.5 justify-around md:justify-center w-full">
                    @foreach (var station in State.Stations)
                    {
                        <StationCard Station="@station" @key="@station.Id" />
                    }
                </div>

                <div class="flex flex-row items-center justify-center">
                    <button class="space-x-2" type="button" title="Load More" disabled="@(State.Stations.Length is 0)" @onclick="@OnLoadMore">
                        <Icon Name="@IconName.ArrowDownward" Size="@TextSize.ExtraLarge2" />
                        <span class="font-medium text-lg">Load More</span>
                    </button>
                </div>
            }
            else
            {
                <div class="flex flex-col h-full items-center justify-center space-y-2.5">
                    <Icon Name="IconName.SentimentDissatisfied" Size="TextSize.ExtraLarge6" />
                    <span class="font-semibold text-lg">No results!</span>
                </div>
            }
        }
        else
        {
            <div class="flex flex-row h-full items-center justify-center">
                <Loading Size="@TextSize.ExtraLarge4" />
            </div>
        }
    </div>
</div>

@code {

    private EditForm? form;
    private SearchStationsParameters parameters = new() { Count = SearchState.StationCount };
    private IDisposable? subscription;
    private FormValidator? validator;

    [CascadingParameter]
    public SearchContext Context { get; init; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string? Country { get; init; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string? Language { get; init; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string? Name { get; init; }

    [Parameter]
    [SupplyParameterFromQuery]
    public int? Order { get; init; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string? Tag { get; init; }

    protected override void Dispose(bool disposing)
    {
        if (disposing)
        {
            subscription?.Dispose();
            if (form?.EditContext is not null)
            {
                form.EditContext.OnFieldChanged -= OnFieldChanged;
            }
        }

        base.Dispose(disposing);
    }

    private Task<bool> ExecuteSearch(Action<SearchStationsParameters>? configure = default)
    {
        if (configure is not null)
        {
            configure(parameters);
        }

        Navigation.NavigateToSearch(parameters);
        return Mutate(state => SearchState.Search(Api.Stations, parameters, state));
    }

    private static IEnumerable<Abstractions.Api.Station> GetStationsWithIcons(SearchState state)
    {
        ArgumentNullException.ThrowIfNull(state);
        foreach (var station in state.Stations)
        {
            if (station.IconUrl is not null)
            {
                yield return station;
            }
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            subscription = Context.OnSearchRequested(async (e, _) =>
            {
                e.Handled();
                return await ExecuteSearch(parameters =>
    {
                parameters.Offset = default;
                parameters.Name = e.Query;
                parameters.Order = StationOrderBy.Name;
            });
            });
        }
    }

    private async void OnFieldChanged(object? sender, FieldChangedEventArgs e)
    {
        if (e.FieldIdentifier.FieldName is nameof(parameters.Codec) or nameof(parameters.CountryCode) or nameof(parameters.LanguageCode) or nameof(parameters.Order) or nameof(parameters.Tag))
        {
            var context = Unsafe.As<EditContext>(sender)!;
            if (context.Validate())
            {
                await ExecuteSearch(parameters =>
                {
                    // NOTE: reset paging
                    parameters.Offset = default;
                });
            }
        }
    }

    private async Task OnLoadMore()
    {
        parameters.Offset = (parameters.Offset ?? 0) + parameters.Count + 1;
        await Mutate(state => SearchState.ContinueSearch(Api.Stations, parameters, state));
    }

    private Task OnSearchSubmit(EditContext context)
    {
        if (context.IsModified())
        {
            return ExecuteSearch(parameters =>
            {
                // NOTE: reset paging
                parameters.Offset = default;
            });
        }

        return Task.CompletedTask;
    }

    public override async Task SetParametersAsync(ParameterView view)
    {
        if (form?.EditContext is not null)
        {
            form.EditContext.OnFieldChanged -= OnFieldChanged;
        }

        view.SetParameterProperties(this);
        var parameters = this.parameters with
        {
            Count = SearchState.StationCount,
            CountryCode = Country,
            LanguageCode = Language,
            Name = Name,
            Order = Order.HasValue ? (StationOrderBy)Math.Max(Order.Value, 0) : StationOrderBy.Name,
            Tag = Tag,
        };

        if (!State.IsLoaded || this.parameters != parameters)
        {
            this.parameters = parameters;
            if (await Mutate(state => SearchState.Search(Api.Stations, parameters, state)))
            {
                form!.EditContext!.MarkAsUnmodified();
            }
        }

        if (!State.IsLoaded)
        {
            await Mutate(state => SearchState.Load(Api, state));
        }

        form!.EditContext!.OnFieldChanged += OnFieldChanged;
    }

}