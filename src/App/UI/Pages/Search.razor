@using ESCd.Extensions.Http
@using Microsoft.Extensions.ObjectPool
@using System.Diagnostics
@using Wadio.App.UI.Components.Routing

@page "/search"

@inherits Stateful<SearchState>

@inject IWadioApi Api
@inject NavigationManager Navigation
@inject ObjectPool<QueryStringBuilder> QueryBuilderPool
@inject ObjectPool<HashSet<Uri>> UriSetPool

<HeadContent>
    @foreach (var url in GetStationPrefetchUrls(UriSetPool, State))
    {
        <link rel="dns-prefetch" href="@url" @key="@url" />
    }
</HeadContent>

<Page Title="@(string.IsNullOrWhiteSpace(parameters.Name) ? "Search" : $"Search for '{parameters.Name}'")">
    <div class="gap-2.5 grid grid-cols-1 grid-rows-(--grid-rows-search) h-full w-full">
        <EditForm @ref="@form" class="flex justify-center gap-2.5 p-2.5 pb-0 space-y-2.5" Model="@parameters" OnSubmit="@OnSearchSubmit">
            <FormValidator @ref="@validator" />

            <div class="flex flex-row gap-5 items-stretch max-h-64 overflow-x-auto px-0.5 pb-2.5 scroll-px-0.5 snap-x">
                <div class="flex flex-col max-w-72 min-w-44 shrink-0 snap-start space-y-1">
                    <label class="font-bold text-gray-400! text-sm uppercase">Order</label>
                    <InputFilterEnum class="h-full ring-accent-subtle" TValue="StationOrderBy" @bind-Value="@parameters.Order" Disabled="@(!State.IsLoaded || State.IsSearching)" />
                    <ValidationMessage For="@(() => parameters.Order)" />
                </div>

                <div class="flex flex-col max-w-72 min-w-44 shrink-0 snap-start space-y-1">
                    <label class="font-bold text-gray-400! text-sm uppercase">Tag</label>
                    <InputFilter class="h-full ring-accent-subtle" TValue="string" @bind-Value="@parameters.Tag" Disabled="@(!State.IsLoaded || State.IsSearching)" Filter="@StringFilterProvider.OrdinalIgnoreCase" Options="@(State.IsLoaded? State.Tags: [])" />
                    <ValidationMessage For="@(() => parameters.Tag)" />
                </div>

                <div class="flex flex-col max-w-72 min-w-44 shrink-0 snap-start space-y-1">
                    <label class="font-bold text-gray-400! text-sm uppercase">Country</label>
                    <InputFilter class="h-full ring-accent-subtle" TValue="string" @bind-Value="@parameters.CountryCode" Disabled="@(!State.IsLoaded || State.IsSearching)" Filter="@StringFilterProvider.OrdinalIgnoreCase" Options="@(State.IsLoaded? State.Countries: [])" />
                    <ValidationMessage For="@(() => parameters.CountryCode)" />
                </div>

                <div class="flex flex-col max-w-72 min-w-44 shrink-0 snap-start space-y-1">
                    <label class="font-bold text-gray-400! text-sm uppercase">Language</label>
                    <InputFilter class="h-full ring-accent-subtle" TValue="string" @bind-Value="@parameters.LanguageCode" Disabled="@(!State.IsLoaded || State.IsSearching)" Filter="@StringFilterProvider.OrdinalIgnoreCase" Options="@(State.IsLoaded? State.Languages: [])" />
                    <ValidationMessage For="@(() => parameters.LanguageCode)" />
                </div>

                <div class="flex flex-col max-w-72 min-w-44 shrink-0 snap-start space-y-1">
                    <label class="font-bold text-gray-400! text-sm uppercase">Codec</label>
                    <InputFilterEnum class="h-full ring-accent-subtle" TValue="Codec" @bind-Value="@parameters.Codec" Disabled="@(!State.IsLoaded || State.IsSearching)" />
                    <ValidationMessage For="@(() => parameters.Codec)" />
                </div>
            </div>
        </EditForm>

        <div class="flex flex-col gap-5 p-2.5 w-full">
            @if (State.IsLoaded && !State.IsSearching)
            {
                @if (State.Stations.Length is not 0)
                {
                    <div class="flex flex-wrap gap-2.5 justify-around md:justify-center w-full">
                        @foreach (var station in State.Stations)
                        {
                            <StationCard ArtworkLoading="@ImageLoadStrategy.Lazy" Station="@station" @key="@station.Id" />
                        }
                    </div>

                    <div class="flex flex-row items-center justify-center">
                        <button class="space-x-2" type="button" title="Load More" disabled="@State.IsSearching" @onclick="@OnLoadMore">
                            <Icon Name="@IconName.ArrowDownward" Size="@TextSize.ExtraLarge2" />
                            <span class="font-medium text-lg">@(State.IsSearching ? "Loading..." : "Load More")</span>
                        </button>
                    </div>
                }
                else
                {
                    <div class="absolute flex flex-col h-2/3 items-center justify-center space-y-2.5 w-full">
                        <Icon Name="IconName.SentimentDissatisfied" Size="TextSize.ExtraLarge6" />
                        <span class="font-semibold text-lg">Nothing Found</span>
                    </div>
                }
            }
            else
            {
                <div class="absolute flex flex-row h-2/3 items-center justify-center w-full">
                    <Loading Size="@TextSize.ExtraLarge4" />
                </div>
            }
        </div>
    </div>
</Page>

@code {

    private EditForm? form;
    private bool initialized;
    private IDisposable? onFieldChanged;
    private IDisposable? onSearchRequested;
    private SearchStationsParameters parameters = new() { Count = SearchState.StationCount };
    private FormValidator? validator;

    [CascadingParameter]
    public SearchContext Context { get; init; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string? Country { get; init; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string? Language { get; init; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string? Name { get; init; }

    [Parameter]
    [SupplyParameterFromQuery]
    public int? Order { get; init; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string? Tag { get; init; }

    protected override void Dispose(bool disposing)
    {
        if (disposing)
        {
            onFieldChanged?.Dispose();
            onSearchRequested?.Dispose();
        }

        base.Dispose(disposing);
    }

    private Task<bool> ExecuteSearch(Action<SearchStationsParameters>? configure = default)
    {
        if (configure is not null)
        {
            configure(parameters);
        }

        Navigation.NavigateToSearch(parameters);
        return Mutate(state => SearchState.Search(Api.Stations, parameters, state));
    }

    private static IEnumerable<Uri> GetStationPrefetchUrls(ObjectPool<HashSet<Uri>> pool, SearchState state)
    {
        ArgumentNullException.ThrowIfNull(pool);
        ArgumentNullException.ThrowIfNull(state);

        var values = pool.Get();
        try
        {
            foreach (var station in state.Stations)
            {
                var value = station.IconUrl?.GetLeftPart(UriPartial.Authority);
                if (!string.IsNullOrEmpty(value))
                {
                    var url = new Uri(value);
                    if (values.Add(url))
                    {
                        yield return url;
                    }
                }
            }
        }
        finally
        {
            pool.Return(values);
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            onSearchRequested = Context.OnSearchRequested(OnSearchRequested);
            onFieldChanged ??= form!.EditContext!.AddFieldChangedListener(OnFieldChanged);
        }
    }

    private async void OnFieldChanged(EditContext context, FieldChangedEventArgs e)
    {
        if (e.FieldIdentifier.FieldName is nameof(parameters.Codec) or nameof(parameters.CountryCode) or nameof(parameters.LanguageCode) or nameof(parameters.Order) or nameof(parameters.Tag))
        {
            if (context.Validate())
            {
                await ExecuteSearch(parameters =>
                {
                    // NOTE: reset paging
                    parameters.Offset = default;
                });
            }
        }
    }

    private async Task OnLoadMore()
    {
        parameters.Offset = (parameters.Offset ?? 0) + parameters.Count + 1;
        await Mutate(state => SearchState.ContinueSearch(Api.Stations, parameters, state));
    }

    private async ValueTask OnSearchRequested(SearchRequestEventArgs e, CancellationToken _)
    {
        e.Handled();
        await ExecuteSearch(parameters =>
        {
            parameters.Offset = default;
            parameters.Name = e.Query;
            parameters.Order = StationOrderBy.Name;
        });
    }

    private Task OnSearchSubmit(EditContext context)
    {
        if (context.IsModified())
        {
            return ExecuteSearch(parameters =>
            {
                // NOTE: reset paging
                parameters.Offset = default;
            });
        }

        return Task.CompletedTask;
    }

    private async Task OnSetParameters(SearchStationsParameters parameters)
    {
        ArgumentNullException.ThrowIfNull(parameters);

        var changing = !State.IsLoaded || this.parameters != parameters;
        if (changing)
        {
            this.parameters = parameters;
        }

        var restored = false;
        if (!Interlocked.CompareExchange(ref initialized, true, false))
        {
            if ((restored = TryRestoreFromPersistence(RestoreKey(parameters))))
            {
                await Mutate(state => state with { IsLoaded = true });
            }
        }

        if (!restored && changing)
        {
            if (!State.IsLoaded)
            {
                await Mutate(state => SearchState.Load(Api, state));
            }

            await Mutate(state => SearchState.Search(Api.Stations, parameters, state));
        }

        if (form?.EditContext is not null)
        {
            if (State.IsLoaded && changing)
            {
                form.EditContext.MarkAsUnmodified();
            }

            if (onFieldChanged is null)
            {
                onFieldChanged = form.EditContext.AddFieldChangedListener(OnFieldChanged);
            }
        }
    }

    public override Task SetParametersAsync(ParameterView view)
    {
        if (onFieldChanged is not null)
        {
            onFieldChanged.Dispose();
            onFieldChanged = default;
        }

        view.SetParameterProperties(this);
        var parameters = this.parameters with
        {
            Count = SearchState.StationCount,
            CountryCode = Country,
            LanguageCode = Language,
            Name = Name,
            Order = Order.HasValue ? (StationOrderBy)Math.Max(Order.Value, 0) : StationOrderBy.Name,
            Tag = Tag,
        };

        return OnSetParametersCore(this, parameters);

        [DebuggerDisableUserUnhandledExceptions]
        static async Task OnSetParametersCore(Search search, SearchStationsParameters parameters)
        {
            var task = search.OnSetParameters(parameters);
            if (task.Status is not TaskStatus.RanToCompletion && task.Status is not TaskStatus.Canceled)
            {
                search.StateHasChanged();
                try
                {
                    await task;
                }
                catch (Exception e) when (e is not NavigationException)
                {
                    Debugger.BreakForUserUnhandledException(e);
                    if (!task.IsCanceled && e is not ObjectDisposedException)
                    {
                        throw;
                    }
                }
            }
        }
    }

    private string RestoreKey(SearchStationsParameters parameters)
    {
        var builder = QueryBuilderPool.Get();
        try
        {
            return builder.Append(nameof(parameters.Count), parameters.Count)
            .Append(nameof(parameters.CountryCode), parameters.CountryCode)
            .Append(nameof(parameters.LanguageCode), parameters.LanguageCode)
            .Append(nameof(parameters.Name), parameters.Name)
            .Append(nameof(parameters.Order), parameters.Order?.ToString())
            .Append(nameof(parameters.Tag), parameters.Tag)
            .ToString();
        }
        finally
        {
            QueryBuilderPool.Return(builder);
        }
    }
}